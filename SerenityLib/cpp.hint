// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define BUILD_TEMPLATE_BEGIN_END_ITR_CLASS_MEMBERS(CONTAINER_TYPE, CONTAINER_VAR_NAME) inline typename CONTAINER_TYPE::iterator begin() noexcept { return CONTAINER_VAR_NAME.begin(); } inline typename CONTAINER_TYPE::const_iterator begin() const noexcept { return CONTAINER_VAR_NAME.begin(); } inline typename CONTAINER_TYPE::iterator end() noexcept { return CONTAINER_VAR_NAME.end(); } inline typename CONTAINER_TYPE::const_iterator end() const noexcept { return CONTAINER_VAR_NAME.end(); } inline typename const CONTAINER_TYPE::const_iterator cbegin() const noexcept { return CONTAINER_VAR_NAME.cbegin(); } inline typename const CONTAINER_TYPE::const_iterator cend() const noexcept { return CONTAINER_VAR_NAME.cend(); }
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define BUILD_TEMPLATE_BEGIN_END_ITR_CLASS_MEMBERS(CONTAINER_TYPE, CONTAINER_VAR_NAME) inline typename CONTAINER_TYPE::iterator begin() noexcept { return CONTAINER_VAR_NAME##.begin(); } inline typename CONTAINER_TYPE::const_iterator begin() const noexcept { return CONTAINER_VAR_NAME##.begin(); } inline typename CONTAINER_TYPE::iterator end() noexcept { return CONTAINER_VAR_NAME##.end(); } inline typename CONTAINER_TYPE::const_iterator end() const noexcept { return CONTAINER_VAR_NAME##.end(); } inline typename const CONTAINER_TYPE::const_iterator cbegin() const noexcept { return CONTAINER_VAR_NAME##.cbegin(); } inline typename const CONTAINER_TYPE::const_iterator cend() const noexcept { return CONTAINER_VAR_NAME##.cend(); }
